language: rust

# Using 16MB stacks for deep test/debug recursion
env:
  global:
    - RUST_MIN_STACK=16777216

matrix:
  fast_finish: true
  include:
    # NB: To help with CI delays, each `pull_request` is only tested on Linux,
    # with 1.12 for compatibility and nightly+rayon_unstable for broad test
    # coverage.  The bors bot counts as a `push` type, which will run it all.

    - rust: 1.12.0
      os: linux
      #if: everything!

    - rust: stable
      os: linux
      if: NOT type = pull_request
    - rust: stable
      os: linux
      env: RUSTFLAGS='--cfg rayon_unstable'
      if: NOT type = pull_request

    - rust: beta
      os: linux
      if: NOT type = pull_request
    - rust: beta
      os: linux
      env: RUSTFLAGS='--cfg rayon_unstable'
      if: NOT type = pull_request

    - rust: nightly
      os: linux
      if: NOT type = pull_request
    - rust: nightly
      os: linux
      env: RUSTFLAGS='--cfg rayon_unstable'
      #if: everything!

    - rust: 1.12.0
      os: osx
      if: NOT type = pull_request

    - rust: stable
      os: osx
      if: NOT type = pull_request
    - rust: stable
      os: osx
      env: RUSTFLAGS='--cfg rayon_unstable'
      if: NOT type = pull_request

    - rust: nightly
      os: osx
      if: NOT type = pull_request
    - rust: nightly
      os: osx
      env: RUSTFLAGS='--cfg rayon_unstable'
      if: NOT type = pull_request

script:
  - cargo build
  - |
    if [ $TRAVIS_RUST_VERSION == nightly ]; then
      cargo test -p rayon &&
      cargo test -p rayon-core &&
      cargo test -p rayon-demo &&
      ./ci/highlander.sh
    fi
  - |
    if [ -n "$RUSTFLAGS" ]; then
      cargo build -p rayon-futures &&
      if [ $TRAVIS_RUST_VERSION == nightly ]; then
        cargo test -p rayon-futures
      fi
    fi

branches:
  only:
    - master
    - staging
    - trying
